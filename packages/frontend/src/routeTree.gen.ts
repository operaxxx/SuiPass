/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as Vaults_vaultIdRouteImport } from './routes/vaults_$vaultId'
import { Route as VaultsRouteImport } from './routes/vaults'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as SecurityRouteImport } from './routes/security'
import { Route as GeneratorRouteImport } from './routes/generator'
import { Route as DemoRouteImport } from './routes/demo'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'

const Vaults_vaultIdRoute = Vaults_vaultIdRouteImport.update({
  id: '/vaults_$vaultId',
  path: '/vaults_$vaultId',
  getParentRoute: () => rootRouteImport,
} as any)
const VaultsRoute = VaultsRouteImport.update({
  id: '/vaults',
  path: '/vaults',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const SecurityRoute = SecurityRouteImport.update({
  id: '/security',
  path: '/security',
  getParentRoute: () => rootRouteImport,
} as any)
const GeneratorRoute = GeneratorRouteImport.update({
  id: '/generator',
  path: '/generator',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoRoute = DemoRouteImport.update({
  id: '/demo',
  path: '/demo',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/demo': typeof DemoRoute
  '/generator': typeof GeneratorRoute
  '/security': typeof SecurityRoute
  '/settings': typeof SettingsRoute
  '/vaults': typeof VaultsRoute
  '/vaults_$vaultId': typeof Vaults_vaultIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/demo': typeof DemoRoute
  '/generator': typeof GeneratorRoute
  '/security': typeof SecurityRoute
  '/settings': typeof SettingsRoute
  '/vaults': typeof VaultsRoute
  '/vaults_$vaultId': typeof Vaults_vaultIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/demo': typeof DemoRoute
  '/generator': typeof GeneratorRoute
  '/security': typeof SecurityRoute
  '/settings': typeof SettingsRoute
  '/vaults': typeof VaultsRoute
  '/vaults_$vaultId': typeof Vaults_vaultIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/demo'
    | '/generator'
    | '/security'
    | '/settings'
    | '/vaults'
    | '/vaults_$vaultId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/demo'
    | '/generator'
    | '/security'
    | '/settings'
    | '/vaults'
    | '/vaults_$vaultId'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/demo'
    | '/generator'
    | '/security'
    | '/settings'
    | '/vaults'
    | '/vaults_$vaultId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  DemoRoute: typeof DemoRoute
  GeneratorRoute: typeof GeneratorRoute
  SecurityRoute: typeof SecurityRoute
  SettingsRoute: typeof SettingsRoute
  VaultsRoute: typeof VaultsRoute
  Vaults_vaultIdRoute: typeof Vaults_vaultIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/vaults_$vaultId': {
      id: '/vaults_$vaultId'
      path: '/vaults_$vaultId'
      fullPath: '/vaults_$vaultId'
      preLoaderRoute: typeof Vaults_vaultIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/vaults': {
      id: '/vaults'
      path: '/vaults'
      fullPath: '/vaults'
      preLoaderRoute: typeof VaultsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/security': {
      id: '/security'
      path: '/security'
      fullPath: '/security'
      preLoaderRoute: typeof SecurityRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/generator': {
      id: '/generator'
      path: '/generator'
      fullPath: '/generator'
      preLoaderRoute: typeof GeneratorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo': {
      id: '/demo'
      path: '/demo'
      fullPath: '/demo'
      preLoaderRoute: typeof DemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  DemoRoute: DemoRoute,
  GeneratorRoute: GeneratorRoute,
  SecurityRoute: SecurityRoute,
  SettingsRoute: SettingsRoute,
  VaultsRoute: VaultsRoute,
  Vaults_vaultIdRoute: Vaults_vaultIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
