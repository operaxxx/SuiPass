name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "testnet"
        type: choice
        options: [local, testnet, mainnet]

env:
  NODE_VERSION: "20"
  RUST_VERSION: "stable"

jobs:
  # Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    name: Build and Test
    outputs:
      build-success: ${{ steps.build.outputs.success }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm bootstrap

      - name: Build project
        id: build
        run: |
          pnpm build
          echo "success=true" >> $GITHUB_OUTPUT

      - name: Run tests
        run: pnpm test

      - name: Run contract tests
        run: pnpm contract:test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/frontend/dist/
            packages/contracts/build/

  # Deploy Smart Contracts
  deploy-contracts:
    runs-on: ubuntu-latest
    name: Deploy Smart Contracts
    needs: build-and-test
    if: needs.build-and-test.outputs.build-success == 'true'

    environment: ${{ github.event.inputs.environment || 'testnet' }}

    env:
      environment: ${{ github.event.inputs.environment || 'testnet' }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Sui CLI
        run: |
          curl -s https://install.sui.dev | sh
          echo ~/.local/bin >> $GITHUB_PATH

      - name: Install Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm bootstrap

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: artifacts/

      - name: Deploy contracts to ${{ env.environment }}
        env:
          SUI_NETWORK: ${{ env.environment }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        run: |
          cd packages/contracts
          pnpm deploy:${{ env.environment }}

      - name: Verify deployment
        run: |
          cd packages/contracts
          pnpm verify:${{ env.environment }}

      - name: Upload deployment info
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info-${{ env.environment }}
          path: packages/contracts/deployment/

  # Deploy Frontend
  deploy-frontend:
    runs-on: ubuntu-latest
    name: Deploy Frontend
    needs: [build-and-test, deploy-contracts]
    if: needs.build-and-test.outputs.build-success == 'true'

    environment: ${{ github.event.inputs.environment || 'testnet' }}

    env:
      environment: ${{ github.event.inputs.environment || 'testnet' }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm bootstrap

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: artifacts/

      - name: Deploy frontend to ${{ env.environment }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
          # Copy built artifacts
          cp -r artifacts/packages/frontend/dist/* dist/

          # Deploy to Netlify
          npx netlify-cli deploy --prod --dir=dist

      - name: Create deployment status
        run: |
          echo "Frontend deployment to ${{ env.environment }} completed successfully"

  # Update Documentation
  update-docs:
    runs-on: ubuntu-latest
    name: Update Documentation
    needs: [deploy-frontend]
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm bootstrap

      - name: Generate documentation
        run: pnpm docs:generate

      - name: Commit and push documentation
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/
          git diff --staged --quiet || git commit -m "docs: update documentation [skip ci]"
          git push

  # Notify Team
  notify:
    runs-on: ubuntu-latest
    name: Notify Team
    needs: [deploy-frontend, update-docs]
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')

    steps:
      - name: Send success notification
        if: needs.deploy-frontend.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "üöÄ Deployment completed successfully!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send failure notification
        if: needs.deploy-frontend.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "‚ùå Deployment failed!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
